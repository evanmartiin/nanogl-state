declare class GLConfig {
    static DAT_MASKS: number[];
    static encodeHalf(f32: number): number;
    static decodeHalf(u16: number): number;
    _dat: Uint16Array;
    _set: number;
    constructor();
    toDefault(): void;
    clone(): GLConfig;
    patch(cfg: GLConfig, out: GLConfig): void;
    setupGL(gl: WebGLRenderingContext): void;
    fromGL(gl: WebGLRenderingContext): void;
    enableBlend(flag?: boolean): this;
    blendFunc(src: GLenum, dst: GLenum): this;
    blendFuncSeparate(srcRgb: GLenum, dstRgb: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): this;
    blendEquation(eq: GLenum): this;
    blendEquationSeparate(rgbEq: GLenum, alphaEq: GLenum): this;
    blendColor(r: number, g: number, b: number, a: number): this;
    depthFunc(func: GLenum): this;
    enableDepthTest(flag?: boolean): this;
    depthRange(near: number, far: number): this;
    lineWidth(w: number): this;
    cullFace(mode: GLenum): this;
    enableCullface(flag: boolean): this;
    polygonOffset(polyOffsetFactor: number, polyOffsetUnits: number): this;
    enablePolygonOffset(flag?: boolean): this;
    enableScissor(flag?: boolean): this;
    scissor(x: number, y: number, w: number, h: number): this;
    viewport(x: number, y: number, w: number, h: number): this;
    enableDither(flag?: boolean): this;
    depthMask(flag: boolean): this;
    colorMask(r: number, g: number, b: number, a: number): this;
    frontFace(dir: GLenum): this;
    enableStencil(flag?: boolean): this;
    stencilFunc(func: GLenum, ref: number, mask: number): this;
    stencilOp(sfail: GLenum, dpfail: GLenum, dppass: GLenum): this;
    stencilMask(mask: number): this;
    stencilFuncSeparate(func: GLenum, ref: number, mask: number, funcback: GLenum, refback: number, maskback: number): this;
    stencilOpSeparate(sfail: GLenum, dpfail: GLenum, dppass: GLenum, sfailback: GLenum, dpfailback: GLenum, dppassback: GLenum): this;
    stencilMaskSeparate(mask: number, maskback: number): this;
}
export default GLConfig;
